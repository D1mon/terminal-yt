{"message":"failed to resolve: use of undeclared type or module `xml`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":88,"byte_end":101,"line_start":5,"line_end":5,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":"use of undeclared type or module `xml`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":88,"byte_end":101,"line_start":5,"line_end":5,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":1},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":1},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":1},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":1},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":1},{"text":"  }","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `xml`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:5:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `xml`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type or module `xml`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":167,"byte_end":180,"line_start":10,"line_end":10,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":"use of undeclared type or module `xml`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":167,"byte_end":180,"line_start":10,"line_end":10,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `xml`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:10:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `xml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unresolved import `log`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":88,"byte_end":101,"line_start":5,"line_end":5,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":88,"byte_end":101,"line_start":5,"line_end":5,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar path exists","code":null,"level":"help","spans":[{"file_name":"src/rss.rs","byte_start":88,"byte_end":101,"line_start":5,"line_end":5,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":"yaserde::log","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/rss.rs","byte_start":88,"byte_end":101,"line_start":5,"line_end":5,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `log`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:5:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar path exists: `yaserde::log`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type or module `xml`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":380,"byte_end":393,"line_start":20,"line_end":20,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize, PartialEq)]","highlight_start":17,"highlight_end":30}],"label":"use of undeclared type or module `xml`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":380,"byte_end":393,"line_start":20,"line_end":20,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize, PartialEq)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `xml`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:20:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `xml`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unresolved import `log`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":167,"byte_end":180,"line_start":10,"line_end":10,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":167,"byte_end":180,"line_start":10,"line_end":10,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar path exists","code":null,"level":"help","spans":[{"file_name":"src/rss.rs","byte_start":167,"byte_end":180,"line_start":10,"line_end":10,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":"yaserde::log","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/rss.rs","byte_start":167,"byte_end":180,"line_start":10,"line_end":10,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `log`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:10:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar path exists: `yaserde::log`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"unresolved import `log`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018, paths in `use` statements are relative to the current module\nunless they begin with the name of a crate or a literal `crate::`, in which\ncase they start from the crate root. As in Rust 2015 code, the `self::` and\n`super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nIn Rust 2018 the `extern crate` declaration is not required and you can instead\njust `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":380,"byte_end":393,"line_start":20,"line_end":20,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize, PartialEq)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":380,"byte_end":393,"line_start":20,"line_end":20,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize, PartialEq)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"a similar path exists","code":null,"level":"help","spans":[{"file_name":"src/rss.rs","byte_start":380,"byte_end":393,"line_start":20,"line_end":20,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize, PartialEq)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":"yaserde::log","suggestion_applicability":"MaybeIncorrect","expansion":{"span":{"file_name":"src/rss.rs","byte_start":380,"byte_end":393,"line_start":20,"line_end":20,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize, PartialEq)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m: unresolved import `log`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:20:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mhelp: a similar path exists: `yaserde::log`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `debug`","code":null,"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":88,"byte_end":101,"line_start":5,"line_end":5,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":88,"byte_end":101,"line_start":5,"line_end":5,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `debug`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:5:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `trace`","code":null,"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":88,"byte_end":101,"line_start":5,"line_end":5,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":88,"byte_end":101,"line_start":5,"line_end":5,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `trace`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:5:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"cannot find attribute `serde` in this scope","code":null,"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":210,"byte_end":215,"line_start":12,"line_end":12,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[serde(rename = \"title\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `serde` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:12:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    #[serde(rename = \"title\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"cannot find attribute `serde` in this scope","code":null,"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":263,"byte_end":268,"line_start":14,"line_end":14,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[serde(skip)]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `serde` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:14:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m14\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    #[serde(skip)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"cannot find attribute `serde` in this scope","code":null,"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":309,"byte_end":314,"line_start":16,"line_end":16,"column_start":7,"column_end":12,"is_primary":true,"text":[{"text":"    #[serde(rename = \"item\")]","highlight_start":7,"highlight_end":12}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot find attribute `serde` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:16:7\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m16\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m    #[serde(rename = \"item\")]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `debug`","code":null,"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":167,"byte_end":180,"line_start":10,"line_end":10,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":167,"byte_end":180,"line_start":10,"line_end":10,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `debug`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:10:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `trace`","code":null,"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":167,"byte_end":180,"line_start":10,"line_end":10,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":167,"byte_end":180,"line_start":10,"line_end":10,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `trace`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:10:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `debug`","code":null,"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":380,"byte_end":393,"line_start":20,"line_end":20,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize, PartialEq)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":380,"byte_end":393,"line_start":20,"line_end":20,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize, PartialEq)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `debug`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:20:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"cannot determine resolution for the macro `trace`","code":null,"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":380,"byte_end":393,"line_start":20,"line_end":20,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize, PartialEq)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":380,"byte_end":393,"line_start":20,"line_end":20,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize, PartialEq)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"import resolution is stuck, try simplifying macro imports","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: cannot determine resolution for the macro `trace`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:20:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: import resolution is stuck, try simplifying macro imports\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type or module `XmlEvent`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":88,"byte_end":101,"line_start":5,"line_end":5,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":"use of undeclared type or module `XmlEvent`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":88,"byte_end":101,"line_start":5,"line_end":5,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `XmlEvent`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:5:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `XmlEvent`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type or module `XmlEvent`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":167,"byte_end":180,"line_start":10,"line_end":10,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":"use of undeclared type or module `XmlEvent`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":167,"byte_end":180,"line_start":10,"line_end":10,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `XmlEvent`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:10:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `XmlEvent`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"failed to resolve: use of undeclared type or module `XmlEvent`","code":{"code":"E0433","explanation":"An undeclared type or module was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type or module `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n"},"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":380,"byte_end":393,"line_start":20,"line_end":20,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize, PartialEq)]","highlight_start":17,"highlight_end":30}],"label":"use of undeclared type or module `XmlEvent`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":380,"byte_end":393,"line_start":20,"line_end":20,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize, PartialEq)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared type or module `XmlEvent`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:20:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared type or module `XmlEvent`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"cannot find trait `Read` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":88,"byte_end":101,"line_start":5,"line_end":5,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":88,"byte_end":101,"line_start":5,"line_end":5,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src/rss.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use yaserde::YaDeserialize;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use serde_json::de::Read;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src/rss.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use yaserde::YaDeserialize;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::io::Read;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Read` in this scope\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:5:17\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m5\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse serde_json::de::Read;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::io::Read;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"cannot find trait `Read` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":167,"byte_end":180,"line_start":10,"line_end":10,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":167,"byte_end":180,"line_start":10,"line_end":10,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src/rss.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use yaserde::YaDeserialize;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use serde_json::de::Read;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src/rss.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use yaserde::YaDeserialize;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::io::Read;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Read` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:10:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse serde_json::de::Read;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::io::Read;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"cannot find trait `Read` in this scope","code":{"code":"E0405","explanation":"The code refers to a trait that is not in scope.\n\nErroneous code example:\n\n```compile_fail,E0405\nstruct Foo;\n\nimpl SomeTrait for Foo {} // error: trait `SomeTrait` is not in scope\n```\n\nPlease verify that the name of the trait wasn't misspelled and ensure that it\nwas imported. Example:\n\n```\n# #[cfg(for_demonstration_only)]\n// solution 1:\nuse some_file::SomeTrait;\n\n// solution 2:\ntrait SomeTrait {\n    // some functions\n}\n\nstruct Foo;\n\nimpl SomeTrait for Foo { // ok!\n    // implements functions\n}\n```\n"},"level":"error","spans":[{"file_name":"src/rss.rs","byte_start":380,"byte_end":393,"line_start":20,"line_end":20,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"#[derive(Debug, YaDeserialize, PartialEq)]","highlight_start":17,"highlight_end":30}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"src/rss.rs","byte_start":380,"byte_end":393,"line_start":20,"line_end":20,"column_start":17,"column_end":30,"is_primary":false,"text":[{"text":"#[derive(Debug, YaDeserialize, PartialEq)]","highlight_start":17,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"#[derive(YaDeserialize)]","def_site_span":{"file_name":"/home/joscha/.cargo/registry/src/github.com-1ecc6299db9ec823/yaserde_derive-0.4.3/src/lib.rs","byte_start":249,"byte_end":469,"line_start":16,"line_end":22,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"pub fn derive_deserialize(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":63},{"text":"  let ast = syn::parse(input).unwrap();","highlight_start":1,"highlight_end":40},{"text":"  match de::expand_derive_deserialize(&ast) {","highlight_start":1,"highlight_end":46},{"text":"    Ok(expanded) => expanded.into(),","highlight_start":1,"highlight_end":37},{"text":"    Err(msg) => panic!(msg),","highlight_start":1,"highlight_end":29},{"text":"  }","highlight_start":1,"highlight_end":4},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src/rss.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use yaserde::YaDeserialize;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use serde_json::de::Read;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src/rss.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use yaserde::YaDeserialize;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::io::Read;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0405]\u001b[0m\u001b[0m\u001b[1m: cannot find trait `Read` in this scope\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/rss.rs:20:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m20\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m#[derive(Debug, YaDeserialize, PartialEq)]\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in a derive macro (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse serde_json::de::Read;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0muse std::io::Read;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\n"}
{"message":"aborting due to 21 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 21 previous errors\u001b[0m\n\n"}
{"message":"Some errors have detailed explanations: E0405, E0432, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0405, E0432, E0433.\u001b[0m\n"}
{"message":"For more information about an error, try `rustc --explain E0405`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0405`.\u001b[0m\n"}
