@startuml

folder data {
	file fetch_data {
		enum FeedType {
			Atom(String)
			Rss(String)
		}

		class UrlFile {
			atom: Vec<String>
			rss: Vec<String>
			---
			fn len -> usize
			fn get_mixed -> Vec<FeedType>
		}

		UrlFile o-- FeedType

		card fetch_data_card [
			pub fetch_new_videos(Sender<String>) -> ChannelList
			read_urls_file() -> UrlFile
		]

		fetch_data_card o-- ChannelList
		fetch_data_card o-- UrlFile
	}

	file history {
		card history_card [
			const HISTORY_FILE_PATH: &str
			pub fn write_history(&ChannelList)
			pub fn read_history() -> Option<ChannelList>
		]

		history_card o-- ChannelList
	}

	file config {
		class Config {
			show_empty_channels: bool
			mark_on_open: bool
			down_on_mark: bool
			app_title: String
			update_at_start: bool
			---
			::default -> Self
			::read_config_file -> Self
		}

		card config_card [
			const CONFIG_FILE_PATH: &str
		]
	}
}

folder data_types {
	file internal {
		enum Filter {
			NoFilter
			OnlyNew
		}

		interface ToSpans {
			fn to_spans() -> Spans
		}

		class Video {
			+ title: String
			+ link: String
			+ pub_date: String
			+ marked: bool
			---
			+ fn ::new() -> Self
			+ fn mark(bool)
			+ fn open()
			===
			impl ToSpan
		}

		Video o-- ToSpans

		class Channel {
			+ name: String
			+ link: String
			+ videso: Vec<Video>
			+ list_state: ListState
			---
			+ fn ::new() -> Self
			+ fn ::new_with_url(&String) -> Self
			+ fn next()
			+ fn prev()
			+ fn has_new() -> bool
			===
			impl ToSpans
		}

		Channel o-- Video
		Channel o-- ToSpans

		class ChannelList {
			+ channels: Vec<Channel>
			+ list_state: ListState
			backup: Vec<Channel>
			---
			+ fn ::new() -> Self
			+ fn next()
			+ fn prev()
			+ fn get_not_empty() -> ChannelList
			+ fn sort()
			+ fn filter(Filter)
		}

		ChannelList o-- Channel
		ChannelList o-- Filter
	}
}

folder src {
	file app {

		enum Action {
			Mark
			Unmark
			Up
			Down
			Enter
			Back
			Open
			Update
		}

		enum Filter {
			All
			OnlyNew
		}
		enum Screen {
			Channels
			Videos
		}

		class App {
			+ terminal: Terminal
			+ config: Config
			+ app_title: String
			+ current_screen: Screen
			current_filter: Filter
			channel_list: ChannelList
			current_selected: usize
			backup_list: ChannelList
			---
			+ ::new_with_channel_list(ChannelList) -> Self
			+ action(Action)
			+ update_channel_list(ChannelList)
			+ set_filter(Filter)
			+ set_channel_list(ChannelList)
			+ get_channel_list() -> ChannelList
			+ get_current_selected() -> usize
			update()
			get_selected_channel() -> Options<&mut Channel>
			get_selected_video() -> Options<&mut Video>
			save()
		}

		App o-- Config
		App o-- ChannelList
		App o-- Screen
		App o-- Filter
		App o-- Action
		App o-- Channel
		App o-- Video
	}

	file draw {
		card draw_card [
			pub fn draw(&mut App)
		]
		
		draw_card o-- App
	}

	file events {
		class Events {
			rx: mpsc::Receiver<Event<Key>>
			input_handle: thread::JoinHandle<()>
			tick_handle: thread::JoinHandle<()>
			---
			+ fn ::new() -> Self
			+ fn next() -> Result<Event<Key>, mpsc::RecvError>
		}
	}

	file main {
		card main_card [
			fn notify_user(&String)
			fn update_channel_list(Sender<ChannelList>, Sender<String>)
			fn main()
		]

		component main [
			fn main() {
				Events
				Config
			}
		]

		main #-- main_card
		main o- Events
		main o- Config

		main_card o-- ChannelList
	}
}

@enduml
