@startuml

folder src {
	package app {
		class App {
			+ terminal: Terminal
			+ config: Config
			+ app_title: String
			+ current_screen: Screen
			current_filter: Filter
			channel_list: ChannelList
			current_selected: usize
			backup_list: ChannelList
			---
			+ ::new_with_channel_list(ChannelList) -> App
			+ action(Action)
			+ update_channel_list(ChannelList)
			+ set_filter(Filter)
			+ set_channel_list(ChannelList)
			+ get_channel_list() -> ChannelList
			+ get_current_selected() -> usize
			update()
			get_selected_channel() -> Options<&mut Channel>
			get_selected_video() -> Options<&mut Video>
			save()
		}

		enum Action {
			Mark
			Unmark
			Up
			Down
			Enter
			Back
			Open
			Update
		}

		enum Filter {
			All
			OnlyNew
		}
		enum Screen {
			Channels
			Videos
		}

		App o-- Screen
		App o-- Filter

	}

	package draw {
		card draw_functions [
			+ fn draw(&mut App)
		]
	}

	package events {
		class Events {
			rx: mpsc::Receiver<Event<Key>>
			input_handle: thread::JoinHandle<()>
			tick_handle: thread::JoinHandle<()>
			---
			+ fn ::new() -> Events
			+ fn next() -> Result<Event<Key>, mpsc::RecvError>
		}
	}

	package main {
		card main_functions [
			fn notify_user(&String)
			fn update_channel_list(Sender<ChannelList>, Sender<String>)
			fn main()
		]
	}
}

folder data_types {
	package internal {
		enum Filter {
			NoFilter
			OnlyNew
		}
		interface ToSpans {
			to_spans() -> Spans
		}
		class ChannelList {
			+ channels: Vec<Channel>
			+ list_state: ListState
			backup: Vec<Channel>
			---
			+ ::new() -> ChannelList
			+ next()
			+ prev()
			+ get_not_empty() -> ChannelList
			+ sort()
			+ filter()
		}
		class Channel {
			+ name: String
			+ link: String
			+ videso: Vec<Video>
			+ list_state: ListState
			---
			+ ::new() -> Channel
			+ ::new_with_url(&String) -> Channel
			+ next()
			+ prev()
			+ has_new() -> bool
			===
			ToSpans
		}
		class Video {
			+ title: String
			+ link: String
			+ pub_date: String
			+ marked: bool
			---
			+ ::new() -> Video
			+ mark(bool)
			+ open()
			===
			ToSpans
		}
	}

	ChannelList o-- Channel
	Channel o-- Video
	Channel o- ToSpans
	Video o- ToSpans
}

folder data {
	package history {
		class UrlFile {
			atom: Vec<String>
			rss: Vec<String>
			---
			len -> usize
			get_mixed -> Vec<FeedType>
		}

		enum FeedType {
			Atom(String)
			Rss(String)
		}

		card fetch_data_functions [
			+ fetch_new_videos(Sender<String>) -> ChannelList
			+ write_history(&ChannelList)
			+ read_history() -> Option<ChannelList>
			notify_user(String)
			read_urls_file() -> UrlFile
		]
	}

	UrlFile o-- FeedType
	fetch_data_functions o- UrlFile

	package config {
		class Config {
			show_empty_channels
			mark_on_open
			down_on_mark
			app_title
			update_at_start
			---
			::default
			::read_config_file
		}
	}
}

App o-- Config
App <- ChannelList
fetch_data_functions o- ChannelList

@enduml
